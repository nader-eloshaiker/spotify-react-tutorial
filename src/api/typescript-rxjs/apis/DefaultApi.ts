// tslint:disable
/**
 * Spotify Web API
 * Welcome to the _Spotify Web API_ specification. For more information about how to use the API, check out [Spotify\'s developer site](https://developer.spotify.com/web-api/). 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    Album,
    AlbumSimplePage,
    Artist,
    Category,
    CategoryPage,
    CurrentUserProfile,
    FeaturedPlaylists,
    InlineObject,
    InlineObject1,
    InlineObject2,
    InlineObject3,
    InlineObject4,
    InlineResponse200,
    InlineResponse2001,
    InlineResponse2002,
    InlineResponse2003,
    Playlist,
    PlaylistSimplePage,
    PlaylistSnapshot,
    PlaylistTrackPage,
    SavedTrackPage,
    Search,
    Track,
    TrackSimplePage,
    UserFollowed,
    UserProfile,
} from '../models';

export interface AlbumsGetRequest {
    ids: string;
    market?: string;
}

export interface AlbumsIdGetRequest {
    id: string;
    market?: string;
}

export interface AlbumsIdTracksGetRequest {
    id: string;
    limit?: number;
    offset?: number;
    market?: string;
}

export interface ArtistsGetRequest {
    ids: string;
}

export interface ArtistsIdAlbumsGetRequest {
    id: string;
    limit?: number;
    offset?: number;
    albumType?: string;
    market?: string;
}

export interface ArtistsIdGetRequest {
    id: string;
}

export interface ArtistsIdRelatedArtistsGetRequest {
    id: string;
}

export interface ArtistsIdTopTracksGetRequest {
    id: string;
    country: string;
}

export interface BrowseCategoriesCategoryIdGetRequest {
    categoryId: string;
    country?: string;
    locale?: string;
    accept?: string;
}

export interface BrowseCategoriesCategoryIdPlaylistsGetRequest {
    categoryId: string;
    limit?: number;
    offset?: number;
    country?: string;
    accept?: string;
}

export interface BrowseCategoriesGetRequest {
    limit?: number;
    offset?: number;
    country?: string;
    locale?: string;
    accept?: string;
}

export interface BrowseFeaturedPlaylistsGetRequest {
    limit?: number;
    offset?: number;
    country?: string;
    locale?: string;
    timestamp?: string;
    accept?: string;
}

export interface BrowseNewReleasesGetRequest {
    limit?: number;
    offset?: number;
    country?: string;
    accept?: string;
}

export interface MeFollowingContainsGetRequest {
    type: MeFollowingContainsGetTypeEnum;
    ids: string;
}

export interface MeFollowingDeleteRequest {
    type: MeFollowingDeleteTypeEnum;
    ids: string;
}

export interface MeFollowingGetRequest {
    type: MeFollowingGetTypeEnum;
    limit?: number;
    after?: string;
}

export interface MeFollowingPutRequest {
    type: MeFollowingPutTypeEnum;
    ids: string;
}

export interface MeTracksContainsGetRequest {
    ids: string;
}

export interface MeTracksDeleteRequest {
    ids: string;
    accept?: string;
}

export interface MeTracksGetRequest {
    limit?: number;
    offset?: number;
    market?: string;
    accept?: string;
}

export interface MeTracksPutRequest {
    ids: string;
    accept?: string;
}

export interface SearchGetRequest {
    q: string;
    type: string;
    limit?: number;
    offset?: number;
    market?: string;
}

export interface TracksGetRequest {
    ids: string;
    market?: string;
}

export interface TracksIdGetRequest {
    id: string;
    market?: string;
}

export interface UsersUserIdGetRequest {
    userId: string;
}

export interface UsersUserIdPlaylistsGetRequest {
    userId: string;
    limit?: number;
    offset?: number;
    accept?: string;
}

export interface UsersUserIdPlaylistsPlaylistIdFollowersContainsGetRequest {
    userId: string;
    playlistId: string;
    ids: string;
}

export interface UsersUserIdPlaylistsPlaylistIdFollowersDeleteRequest {
    userId: string;
    playlistId: string;
}

export interface UsersUserIdPlaylistsPlaylistIdFollowersPutRequest {
    userId: string;
    playlistId: string;
    body: InlineObject2;
}

export interface UsersUserIdPlaylistsPlaylistIdGetRequest {
    userId: string;
    playlistId: string;
    fields?: string;
    market?: string;
    accept?: string;
}

export interface UsersUserIdPlaylistsPlaylistIdPutRequest {
    userId: string;
    playlistId: string;
    body: InlineObject1;
    accept?: string;
}

export interface UsersUserIdPlaylistsPlaylistIdTracksDeleteRequest {
    userId: string;
    playlistId: string;
    body: InlineObject4;
    accept?: string;
}

export interface UsersUserIdPlaylistsPlaylistIdTracksGetRequest {
    userId: string;
    playlistId: string;
    limit?: number;
    offset?: number;
    fields?: string;
    market?: string;
    accept?: string;
}

export interface UsersUserIdPlaylistsPlaylistIdTracksPostRequest {
    userId: string;
    playlistId: string;
    uris: string;
    position?: number;
    accept?: string;
}

export interface UsersUserIdPlaylistsPlaylistIdTracksPutRequest {
    userId: string;
    playlistId: string;
    body: InlineObject3;
    accept?: string;
}

export interface UsersUserIdPlaylistsPostRequest {
    userId: string;
    body: InlineObject;
    accept?: string;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) 
     */
    albumsGet({ ids, market }: AlbumsGetRequest): Observable<InlineResponse200>
    albumsGet({ ids, market }: AlbumsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<InlineResponse200>>
    albumsGet({ ids, market }: AlbumsGetRequest, opts?: OperationOpts): Observable<InlineResponse200 | RawAjaxResponse<InlineResponse200>> {
        throwIfNullOrUndefined(ids, 'ids', 'albumsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ids': ids,
        };

        if (market != null) { query['market'] = market; }

        return this.request<InlineResponse200>({
            url: '/albums',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get an Album](https://developer.spotify.com/web-api/get-album/) 
     */
    albumsIdGet({ id, market }: AlbumsIdGetRequest): Observable<Album>
    albumsIdGet({ id, market }: AlbumsIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Album>>
    albumsIdGet({ id, market }: AlbumsIdGetRequest, opts?: OperationOpts): Observable<Album | RawAjaxResponse<Album>> {
        throwIfNullOrUndefined(id, 'id', 'albumsIdGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (market != null) { query['market'] = market; }

        return this.request<Album>({
            url: '/albums/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get an Album\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) 
     */
    albumsIdTracksGet({ id, limit, offset, market }: AlbumsIdTracksGetRequest): Observable<TrackSimplePage>
    albumsIdTracksGet({ id, limit, offset, market }: AlbumsIdTracksGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<TrackSimplePage>>
    albumsIdTracksGet({ id, limit, offset, market }: AlbumsIdTracksGetRequest, opts?: OperationOpts): Observable<TrackSimplePage | RawAjaxResponse<TrackSimplePage>> {
        throwIfNullOrUndefined(id, 'id', 'albumsIdTracksGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (market != null) { query['market'] = market; }

        return this.request<TrackSimplePage>({
            url: '/albums/{id}/tracks'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) 
     */
    artistsGet({ ids }: ArtistsGetRequest): Observable<InlineResponse2001>
    artistsGet({ ids }: ArtistsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<InlineResponse2001>>
    artistsGet({ ids }: ArtistsGetRequest, opts?: OperationOpts): Observable<InlineResponse2001 | RawAjaxResponse<InlineResponse2001>> {
        throwIfNullOrUndefined(ids, 'ids', 'artistsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ids': ids,
        };

        return this.request<InlineResponse2001>({
            url: '/artists',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get an Artist\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) 
     */
    artistsIdAlbumsGet({ id, limit, offset, albumType, market }: ArtistsIdAlbumsGetRequest): Observable<AlbumSimplePage>
    artistsIdAlbumsGet({ id, limit, offset, albumType, market }: ArtistsIdAlbumsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AlbumSimplePage>>
    artistsIdAlbumsGet({ id, limit, offset, albumType, market }: ArtistsIdAlbumsGetRequest, opts?: OperationOpts): Observable<AlbumSimplePage | RawAjaxResponse<AlbumSimplePage>> {
        throwIfNullOrUndefined(id, 'id', 'artistsIdAlbumsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (albumType != null) { query['album_type'] = albumType; }
        if (market != null) { query['market'] = market; }

        return this.request<AlbumSimplePage>({
            url: '/artists/{id}/albums'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) 
     */
    artistsIdGet({ id }: ArtistsIdGetRequest): Observable<Artist>
    artistsIdGet({ id }: ArtistsIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Artist>>
    artistsIdGet({ id }: ArtistsIdGetRequest, opts?: OperationOpts): Observable<Artist | RawAjaxResponse<Artist>> {
        throwIfNullOrUndefined(id, 'id', 'artistsIdGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Artist>({
            url: '/artists/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * [Get an Artist\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) 
     */
    artistsIdRelatedArtistsGet({ id }: ArtistsIdRelatedArtistsGetRequest): Observable<InlineResponse2001>
    artistsIdRelatedArtistsGet({ id }: ArtistsIdRelatedArtistsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<InlineResponse2001>>
    artistsIdRelatedArtistsGet({ id }: ArtistsIdRelatedArtistsGetRequest, opts?: OperationOpts): Observable<InlineResponse2001 | RawAjaxResponse<InlineResponse2001>> {
        throwIfNullOrUndefined(id, 'id', 'artistsIdRelatedArtistsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<InlineResponse2001>({
            url: '/artists/{id}/related-artists'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * [Get an Artist\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) 
     */
    artistsIdTopTracksGet({ id, country }: ArtistsIdTopTracksGetRequest): Observable<InlineResponse2002>
    artistsIdTopTracksGet({ id, country }: ArtistsIdTopTracksGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<InlineResponse2002>>
    artistsIdTopTracksGet({ id, country }: ArtistsIdTopTracksGetRequest, opts?: OperationOpts): Observable<InlineResponse2002 | RawAjaxResponse<InlineResponse2002>> {
        throwIfNullOrUndefined(id, 'id', 'artistsIdTopTracksGet');
        throwIfNullOrUndefined(country, 'country', 'artistsIdTopTracksGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'country': country,
        };

        return this.request<InlineResponse2002>({
            url: '/artists/{id}/top-tracks'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) 
     */
    browseCategoriesCategoryIdGet({ categoryId, country, locale, accept }: BrowseCategoriesCategoryIdGetRequest): Observable<Category>
    browseCategoriesCategoryIdGet({ categoryId, country, locale, accept }: BrowseCategoriesCategoryIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Category>>
    browseCategoriesCategoryIdGet({ categoryId, country, locale, accept }: BrowseCategoriesCategoryIdGetRequest, opts?: OperationOpts): Observable<Category | RawAjaxResponse<Category>> {
        throwIfNullOrUndefined(categoryId, 'categoryId', 'browseCategoriesCategoryIdGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (country != null) { query['country'] = country; }
        if (locale != null) { query['locale'] = locale; }

        return this.request<Category>({
            url: '/browse/categories/{category_id}'.replace('{category_id}', encodeURI(categoryId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get a Category\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) 
     */
    browseCategoriesCategoryIdPlaylistsGet({ categoryId, limit, offset, country, accept }: BrowseCategoriesCategoryIdPlaylistsGetRequest): Observable<InlineResponse2003>
    browseCategoriesCategoryIdPlaylistsGet({ categoryId, limit, offset, country, accept }: BrowseCategoriesCategoryIdPlaylistsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<InlineResponse2003>>
    browseCategoriesCategoryIdPlaylistsGet({ categoryId, limit, offset, country, accept }: BrowseCategoriesCategoryIdPlaylistsGetRequest, opts?: OperationOpts): Observable<InlineResponse2003 | RawAjaxResponse<InlineResponse2003>> {
        throwIfNullOrUndefined(categoryId, 'categoryId', 'browseCategoriesCategoryIdPlaylistsGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (country != null) { query['country'] = country; }

        return this.request<InlineResponse2003>({
            url: '/browse/categories/{category_id}/playlists'.replace('{category_id}', encodeURI(categoryId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) 
     */
    browseCategoriesGet({ limit, offset, country, locale, accept }: BrowseCategoriesGetRequest): Observable<CategoryPage>
    browseCategoriesGet({ limit, offset, country, locale, accept }: BrowseCategoriesGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CategoryPage>>
    browseCategoriesGet({ limit, offset, country, locale, accept }: BrowseCategoriesGetRequest, opts?: OperationOpts): Observable<CategoryPage | RawAjaxResponse<CategoryPage>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (country != null) { query['country'] = country; }
        if (locale != null) { query['locale'] = locale; }

        return this.request<CategoryPage>({
            url: '/browse/categories',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) 
     */
    browseFeaturedPlaylistsGet({ limit, offset, country, locale, timestamp, accept }: BrowseFeaturedPlaylistsGetRequest): Observable<FeaturedPlaylists>
    browseFeaturedPlaylistsGet({ limit, offset, country, locale, timestamp, accept }: BrowseFeaturedPlaylistsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<FeaturedPlaylists>>
    browseFeaturedPlaylistsGet({ limit, offset, country, locale, timestamp, accept }: BrowseFeaturedPlaylistsGetRequest, opts?: OperationOpts): Observable<FeaturedPlaylists | RawAjaxResponse<FeaturedPlaylists>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (country != null) { query['country'] = country; }
        if (locale != null) { query['locale'] = locale; }
        if (timestamp != null) { query['timestamp'] = timestamp; }

        return this.request<FeaturedPlaylists>({
            url: '/browse/featured-playlists',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) 
     */
    browseNewReleasesGet({ limit, offset, country, accept }: BrowseNewReleasesGetRequest): Observable<AlbumSimplePage>
    browseNewReleasesGet({ limit, offset, country, accept }: BrowseNewReleasesGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AlbumSimplePage>>
    browseNewReleasesGet({ limit, offset, country, accept }: BrowseNewReleasesGetRequest, opts?: OperationOpts): Observable<AlbumSimplePage | RawAjaxResponse<AlbumSimplePage>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (country != null) { query['country'] = country; }

        return this.request<AlbumSimplePage>({
            url: '/browse/new-releases',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) 
     */
    meFollowingContainsGet({ type, ids }: MeFollowingContainsGetRequest): Observable<Array<boolean>>
    meFollowingContainsGet({ type, ids }: MeFollowingContainsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<boolean>>>
    meFollowingContainsGet({ type, ids }: MeFollowingContainsGetRequest, opts?: OperationOpts): Observable<Array<boolean> | RawAjaxResponse<Array<boolean>>> {
        throwIfNullOrUndefined(type, 'type', 'meFollowingContainsGet');
        throwIfNullOrUndefined(ids, 'ids', 'meFollowingContainsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['user-follow-read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'type': type,
            'ids': ids,
        };

        return this.request<Array<boolean>>({
            url: '/me/following/contains',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) 
     */
    meFollowingDelete({ type, ids }: MeFollowingDeleteRequest): Observable<void>
    meFollowingDelete({ type, ids }: MeFollowingDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    meFollowingDelete({ type, ids }: MeFollowingDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'meFollowingDelete');
        throwIfNullOrUndefined(ids, 'ids', 'meFollowingDelete');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['user-follow-modify'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'type': type,
            'ids': ids,
        };

        return this.request<void>({
            url: '/me/following',
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get User\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) 
     */
    meFollowingGet({ type, limit, after }: MeFollowingGetRequest): Observable<UserFollowed>
    meFollowingGet({ type, limit, after }: MeFollowingGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserFollowed>>
    meFollowingGet({ type, limit, after }: MeFollowingGetRequest, opts?: OperationOpts): Observable<UserFollowed | RawAjaxResponse<UserFollowed>> {
        throwIfNullOrUndefined(type, 'type', 'meFollowingGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['user-follow-read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'type': type,
        };

        if (limit != null) { query['limit'] = limit; }
        if (after != null) { query['after'] = after; }

        return this.request<UserFollowed>({
            url: '/me/following',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) 
     */
    meFollowingPut({ type, ids }: MeFollowingPutRequest): Observable<void>
    meFollowingPut({ type, ids }: MeFollowingPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    meFollowingPut({ type, ids }: MeFollowingPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'meFollowingPut');
        throwIfNullOrUndefined(ids, 'ids', 'meFollowingPut');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['user-follow-modify'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'type': type,
            'ids': ids,
        };

        return this.request<void>({
            url: '/me/following',
            method: 'PUT',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get Current User\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) 
     */
    meGet(): Observable<CurrentUserProfile>
    meGet(opts?: OperationOpts): Observable<RawAjaxResponse<CurrentUserProfile>>
    meGet(opts?: OperationOpts): Observable<CurrentUserProfile | RawAjaxResponse<CurrentUserProfile>> {
        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CurrentUserProfile>({
            url: '/me',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * [Check Current User\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) 
     */
    meTracksContainsGet({ ids }: MeTracksContainsGetRequest): Observable<Array<boolean>>
    meTracksContainsGet({ ids }: MeTracksContainsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<boolean>>>
    meTracksContainsGet({ ids }: MeTracksContainsGetRequest, opts?: OperationOpts): Observable<Array<boolean> | RawAjaxResponse<Array<boolean>>> {
        throwIfNullOrUndefined(ids, 'ids', 'meTracksContainsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ids': ids,
        };

        return this.request<Array<boolean>>({
            url: '/me/tracks/contains',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) 
     */
    meTracksDelete({ ids, accept }: MeTracksDeleteRequest): Observable<void>
    meTracksDelete({ ids, accept }: MeTracksDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    meTracksDelete({ ids, accept }: MeTracksDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(ids, 'ids', 'meTracksDelete');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ids': ids,
        };

        return this.request<void>({
            url: '/me/tracks',
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get Current User\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) 
     */
    meTracksGet({ limit, offset, market, accept }: MeTracksGetRequest): Observable<SavedTrackPage>
    meTracksGet({ limit, offset, market, accept }: MeTracksGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<SavedTrackPage>>
    meTracksGet({ limit, offset, market, accept }: MeTracksGetRequest, opts?: OperationOpts): Observable<SavedTrackPage | RawAjaxResponse<SavedTrackPage>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (market != null) { query['market'] = market; }

        return this.request<SavedTrackPage>({
            url: '/me/tracks',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) 
     */
    meTracksPut({ ids, accept }: MeTracksPutRequest): Observable<void>
    meTracksPut({ ids, accept }: MeTracksPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    meTracksPut({ ids, accept }: MeTracksPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(ids, 'ids', 'meTracksPut');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ids': ids,
        };

        return this.request<void>({
            url: '/me/tracks',
            method: 'PUT',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Search for an Item](https://developer.spotify.com/web-api/search-item/) 
     */
    searchGet({ q, type, limit, offset, market }: SearchGetRequest): Observable<Search>
    searchGet({ q, type, limit, offset, market }: SearchGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Search>>
    searchGet({ q, type, limit, offset, market }: SearchGetRequest, opts?: OperationOpts): Observable<Search | RawAjaxResponse<Search>> {
        throwIfNullOrUndefined(q, 'q', 'searchGet');
        throwIfNullOrUndefined(type, 'type', 'searchGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'q': q,
            'type': type,
        };

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (market != null) { query['market'] = market; }

        return this.request<Search>({
            url: '/search',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) 
     */
    tracksGet({ ids, market }: TracksGetRequest): Observable<InlineResponse2002>
    tracksGet({ ids, market }: TracksGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<InlineResponse2002>>
    tracksGet({ ids, market }: TracksGetRequest, opts?: OperationOpts): Observable<InlineResponse2002 | RawAjaxResponse<InlineResponse2002>> {
        throwIfNullOrUndefined(ids, 'ids', 'tracksGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ids': ids,
        };

        if (market != null) { query['market'] = market; }

        return this.request<InlineResponse2002>({
            url: '/tracks',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get a Track](https://developer.spotify.com/web-api/get-track/) 
     */
    tracksIdGet({ id, market }: TracksIdGetRequest): Observable<Track>
    tracksIdGet({ id, market }: TracksIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Track>>
    tracksIdGet({ id, market }: TracksIdGetRequest, opts?: OperationOpts): Observable<Track | RawAjaxResponse<Track>> {
        throwIfNullOrUndefined(id, 'id', 'tracksIdGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (market != null) { query['market'] = market; }

        return this.request<Track>({
            url: '/tracks/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Get a User\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) 
     */
    usersUserIdGet({ userId }: UsersUserIdGetRequest): Observable<UserProfile>
    usersUserIdGet({ userId }: UsersUserIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserProfile>>
    usersUserIdGet({ userId }: UsersUserIdGetRequest, opts?: OperationOpts): Observable<UserProfile | RawAjaxResponse<UserProfile>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UserProfile>({
            url: '/users/{user_id}'.replace('{user_id}', encodeURI(userId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * [Get a List of a User\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) 
     */
    usersUserIdPlaylistsGet({ userId, limit, offset, accept }: UsersUserIdPlaylistsGetRequest): Observable<PlaylistSimplePage>
    usersUserIdPlaylistsGet({ userId, limit, offset, accept }: UsersUserIdPlaylistsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PlaylistSimplePage>>
    usersUserIdPlaylistsGet({ userId, limit, offset, accept }: UsersUserIdPlaylistsGetRequest, opts?: OperationOpts): Observable<PlaylistSimplePage | RawAjaxResponse<PlaylistSimplePage>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['playlist-read-private', 'playlist-read-collaborative'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }

        return this.request<PlaylistSimplePage>({
            url: '/users/{user_id}/playlists'.replace('{user_id}', encodeURI(userId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) 
     */
    usersUserIdPlaylistsPlaylistIdFollowersContainsGet({ userId, playlistId, ids }: UsersUserIdPlaylistsPlaylistIdFollowersContainsGetRequest): Observable<Array<boolean>>
    usersUserIdPlaylistsPlaylistIdFollowersContainsGet({ userId, playlistId, ids }: UsersUserIdPlaylistsPlaylistIdFollowersContainsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<boolean>>>
    usersUserIdPlaylistsPlaylistIdFollowersContainsGet({ userId, playlistId, ids }: UsersUserIdPlaylistsPlaylistIdFollowersContainsGetRequest, opts?: OperationOpts): Observable<Array<boolean> | RawAjaxResponse<Array<boolean>>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdFollowersContainsGet');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdFollowersContainsGet');
        throwIfNullOrUndefined(ids, 'ids', 'usersUserIdPlaylistsPlaylistIdFollowersContainsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ids': ids,
        };

        return this.request<Array<boolean>>({
            url: '/users/{user_id}/playlists/{playlist_id}/followers/contains'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) 
     */
    usersUserIdPlaylistsPlaylistIdFollowersDelete({ userId, playlistId }: UsersUserIdPlaylistsPlaylistIdFollowersDeleteRequest): Observable<void>
    usersUserIdPlaylistsPlaylistIdFollowersDelete({ userId, playlistId }: UsersUserIdPlaylistsPlaylistIdFollowersDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    usersUserIdPlaylistsPlaylistIdFollowersDelete({ userId, playlistId }: UsersUserIdPlaylistsPlaylistIdFollowersDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdFollowersDelete');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdFollowersDelete');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['playlist-modify-public', 'playlist-modify-private'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/users/{user_id}/playlists/{playlist_id}/followers'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) 
     */
    usersUserIdPlaylistsPlaylistIdFollowersPut({ userId, playlistId, body }: UsersUserIdPlaylistsPlaylistIdFollowersPutRequest): Observable<void>
    usersUserIdPlaylistsPlaylistIdFollowersPut({ userId, playlistId, body }: UsersUserIdPlaylistsPlaylistIdFollowersPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    usersUserIdPlaylistsPlaylistIdFollowersPut({ userId, playlistId, body }: UsersUserIdPlaylistsPlaylistIdFollowersPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdFollowersPut');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdFollowersPut');
        throwIfNullOrUndefined(body, 'body', 'usersUserIdPlaylistsPlaylistIdFollowersPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['playlist-modify-public', 'playlist-modify-private'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/users/{user_id}/playlists/{playlist_id}/followers'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'PUT',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) 
     */
    usersUserIdPlaylistsPlaylistIdGet({ userId, playlistId, fields, market, accept }: UsersUserIdPlaylistsPlaylistIdGetRequest): Observable<Playlist>
    usersUserIdPlaylistsPlaylistIdGet({ userId, playlistId, fields, market, accept }: UsersUserIdPlaylistsPlaylistIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Playlist>>
    usersUserIdPlaylistsPlaylistIdGet({ userId, playlistId, fields, market, accept }: UsersUserIdPlaylistsPlaylistIdGetRequest, opts?: OperationOpts): Observable<Playlist | RawAjaxResponse<Playlist>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdGet');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (fields != null) { query['fields'] = fields; }
        if (market != null) { query['market'] = market; }

        return this.request<Playlist>({
            url: '/users/{user_id}/playlists/{playlist_id}'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Change a Playlist\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) 
     */
    usersUserIdPlaylistsPlaylistIdPut({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdPutRequest): Observable<void>
    usersUserIdPlaylistsPlaylistIdPut({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    usersUserIdPlaylistsPlaylistIdPut({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdPut');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdPut');
        throwIfNullOrUndefined(body, 'body', 'usersUserIdPlaylistsPlaylistIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['playlist-modify-public', 'playlist-modify-private'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/users/{user_id}/playlists/{playlist_id}'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'PUT',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) 
     */
    usersUserIdPlaylistsPlaylistIdTracksDelete({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdTracksDeleteRequest): Observable<PlaylistSnapshot>
    usersUserIdPlaylistsPlaylistIdTracksDelete({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdTracksDeleteRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PlaylistSnapshot>>
    usersUserIdPlaylistsPlaylistIdTracksDelete({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdTracksDeleteRequest, opts?: OperationOpts): Observable<PlaylistSnapshot | RawAjaxResponse<PlaylistSnapshot>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdTracksDelete');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdTracksDelete');
        throwIfNullOrUndefined(body, 'body', 'usersUserIdPlaylistsPlaylistIdTracksDelete');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['playlist-modify-public', 'playlist-modify-private'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<PlaylistSnapshot>({
            url: '/users/{user_id}/playlists/{playlist_id}/tracks'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'DELETE',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * [Get a Playlist\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) 
     */
    usersUserIdPlaylistsPlaylistIdTracksGet({ userId, playlistId, limit, offset, fields, market, accept }: UsersUserIdPlaylistsPlaylistIdTracksGetRequest): Observable<PlaylistTrackPage>
    usersUserIdPlaylistsPlaylistIdTracksGet({ userId, playlistId, limit, offset, fields, market, accept }: UsersUserIdPlaylistsPlaylistIdTracksGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PlaylistTrackPage>>
    usersUserIdPlaylistsPlaylistIdTracksGet({ userId, playlistId, limit, offset, fields, market, accept }: UsersUserIdPlaylistsPlaylistIdTracksGetRequest, opts?: OperationOpts): Observable<PlaylistTrackPage | RawAjaxResponse<PlaylistTrackPage>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdTracksGet');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdTracksGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', [])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (fields != null) { query['fields'] = fields; }
        if (market != null) { query['market'] = market; }

        return this.request<PlaylistTrackPage>({
            url: '/users/{user_id}/playlists/{playlist_id}/tracks'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) 
     */
    usersUserIdPlaylistsPlaylistIdTracksPost({ userId, playlistId, uris, position, accept }: UsersUserIdPlaylistsPlaylistIdTracksPostRequest): Observable<PlaylistSnapshot>
    usersUserIdPlaylistsPlaylistIdTracksPost({ userId, playlistId, uris, position, accept }: UsersUserIdPlaylistsPlaylistIdTracksPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PlaylistSnapshot>>
    usersUserIdPlaylistsPlaylistIdTracksPost({ userId, playlistId, uris, position, accept }: UsersUserIdPlaylistsPlaylistIdTracksPostRequest, opts?: OperationOpts): Observable<PlaylistSnapshot | RawAjaxResponse<PlaylistSnapshot>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdTracksPost');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdTracksPost');
        throwIfNullOrUndefined(uris, 'uris', 'usersUserIdPlaylistsPlaylistIdTracksPost');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['playlist-modify-public', 'playlist-modify-private'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'uris': uris,
        };

        if (position != null) { query['position'] = position; }

        return this.request<PlaylistSnapshot>({
            url: '/users/{user_id}/playlists/{playlist_id}/tracks'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Reorder or replace a Playlist\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) 
     */
    usersUserIdPlaylistsPlaylistIdTracksPut({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdTracksPutRequest): Observable<PlaylistSnapshot>
    usersUserIdPlaylistsPlaylistIdTracksPut({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdTracksPutRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PlaylistSnapshot>>
    usersUserIdPlaylistsPlaylistIdTracksPut({ userId, playlistId, body, accept }: UsersUserIdPlaylistsPlaylistIdTracksPutRequest, opts?: OperationOpts): Observable<PlaylistSnapshot | RawAjaxResponse<PlaylistSnapshot>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPlaylistIdTracksPut');
        throwIfNullOrUndefined(playlistId, 'playlistId', 'usersUserIdPlaylistsPlaylistIdTracksPut');
        throwIfNullOrUndefined(body, 'body', 'usersUserIdPlaylistsPlaylistIdTracksPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['playlist-modify-public', 'playlist-modify-private'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<PlaylistSnapshot>({
            url: '/users/{user_id}/playlists/{playlist_id}/tracks'.replace('{user_id}', encodeURI(userId)).replace('{playlist_id}', encodeURI(playlistId)),
            method: 'PUT',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) 
     */
    usersUserIdPlaylistsPost({ userId, body, accept }: UsersUserIdPlaylistsPostRequest): Observable<Playlist>
    usersUserIdPlaylistsPost({ userId, body, accept }: UsersUserIdPlaylistsPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Playlist>>
    usersUserIdPlaylistsPost({ userId, body, accept }: UsersUserIdPlaylistsPostRequest, opts?: OperationOpts): Observable<Playlist | RawAjaxResponse<Playlist>> {
        throwIfNullOrUndefined(userId, 'userId', 'usersUserIdPlaylistsPost');
        throwIfNullOrUndefined(body, 'body', 'usersUserIdPlaylistsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('oauth_2_0', ['playlist-modify-public', 'playlist-modify-private'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Playlist>({
            url: '/users/{user_id}/playlists'.replace('{user_id}', encodeURI(userId)),
            method: 'POST',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum MeFollowingContainsGetTypeEnum {
    artist = 'artist',
    user = 'user'
}
/**
 * @export
 * @enum {string}
 */
export enum MeFollowingDeleteTypeEnum {
    artist = 'artist',
    user = 'user'
}
/**
 * @export
 * @enum {string}
 */
export enum MeFollowingGetTypeEnum {
    artist = 'artist'
}
/**
 * @export
 * @enum {string}
 */
export enum MeFollowingPutTypeEnum {
    artist = 'artist',
    user = 'user'
}
